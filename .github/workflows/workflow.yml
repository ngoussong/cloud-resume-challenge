name: Build, Deploy, and Test Angular Website with OIDC
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
permissions:
  id-token: write
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4
      # Step 2: Set up Node.js (for Angular build)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install
      # Step 4: Run tests
      #- name: Run tests
      #  run: npm run test  
      # Step 5: Build the Angular project
      - name: Clean build directory
        run: rm -rf dist && mkdir dist
      - name: Build Angular app
        run: npm run build --verbose
      - name: List build directory contents
        run: ls -la dist/andresjosehr-portfolio  
      # Step 6: Upload build artifacts (optional, for debugging)
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build-artifacts
      #     path: dist/andresjosehr-portfolio
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
      # Step 2: Configure OIDC and assume role
      - name: Configure AWS OIDC role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::014498624754:role/GithubOIDCRole
          aws-region: 'eu-central-1'
      # Step 3: Deploy to S3
      - name: List S3 Bucket (Before Sync)
        run: aws s3 ls s3://arthurfonda.com/ --recursive
      # - name: Invalidate CloudFront Cache
      #   run: |
      #     echo "Invalidating CloudFront cache..."
      #     aws cloudfront create-invalidation \
      #       --distribution-id EPD0U1ZP2WFP3 \
      #       --paths "/*"  
      - name: Deploy to S3
        run: |
          echo "Deploying files to S3..."
          aws s3 sync dist/andresjosehr-portfolio s3://arthurfonda.com --delete
          aws s3 cp s3://arthurfonda.com/index.html s3://arthurfonda.com/index.html --cache-control "no-cache"
          echo "Deployment complete."
  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      # Step 1: Make an HTTP request to the website to ensure itâ€™s live
      - name: test
        run: curl -I http://arthurfonda.com.s3-website.eu-central-1.amazonaws.com/ | grep "200 OK"
